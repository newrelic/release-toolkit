name: OHI release notes
description: Wrapper for release toolkit that runs commands needed to release an OHI
inputs:
  git-root:
    description: Path to the root of the git repository to source bot commits from.
    default: "."
  excluded-dirs:
    description: Exclude commits whose changes only impact files in specified dirs relative to repository root. Defaults to ".github".
    default: '.github'
  excluded-files:
    description: Exclude commits whose changes only impact files in specified files relative to repository root. Defaults to "".
    default: ''
  fail-if-held:
    description: Fail if the held toggle is active. Defaults to `true`.
    default: 'true'
  link-dependencies-dictionary:
    description: Sets the link dependency dictionary. `.github/rt-dictionary.yml` is used by default, if it does not exist a common dictionary is used.
    default: '.github/rt-dictionary.yml'
outputs:
  is-empty:
    description: "Outputs if changelog is empty"
    value: ${{ steps.empty.outputs.is-empty }}
  is-held:
    description: "Outputs if changelog is held"
    value: ${{ steps.held.outputs.is-held }}
  skip-release:
    description: "Outputs if a release should be skipped"
    value: ${{ steps.check-release.outputs.skip }}
  next-version:
    description: "Version of this release"
    value: ${{ steps.version.outputs.next-version }}
  release-title:
    description: "Title of this release"
    value: ${{ steps.release.outputs.title }}
  release-changelog:
    description: "Complete changelog of this release"
    value: ${{ steps.release.outputs.changelog }}
  release-changelog-partial:
    description: "Changelog for only this release"
    value: ${{ steps.release.outputs.changelog-partial }}
runs:
  using: composite
  steps:
    - name: Validate that the markdown is correct
      uses: newrelic/release-toolkit/validate-markdown@v1
      with:
        markdown: ${{ inputs.git-root }}/CHANGELOG.md
    - name: Generate YAML
      uses: newrelic/release-toolkit/generate-yaml@v1
      with:
        excluded-dirs: ${{ inputs.excluded-dirs }}
        excluded-files: ${{ inputs.excluded-files }}
        git-root: ${{ inputs.git-root }}
        markdown: ${{ inputs.git-root }}/CHANGELOG.md
        yaml: ${{ inputs.git-root }}/changelog.yaml
        exit-code: "0"
    - name: Check if the release is empty
      id: empty
      uses: newrelic/release-toolkit/is-empty@v1
      with:
        yaml: ${{ inputs.git-root }}/changelog.yaml
    - name: Check if the release is held
      id: held
      uses: newrelic/release-toolkit/is-held@v1
      with:
        yaml: ${{ inputs.git-root }}/changelog.yaml
    - name: Check if the release should be skipped
      id: check-release
      shell: bash
      run: |
        echo "::set-output name=skip::${{ steps.empty.outputs.is-empty == 'true' || steps.held.outputs.is-held == 'true' }}"
    # rt-dictionary is a file contained by this action and is located inside $GITHUB_ACTION_PATH, but this
    # folder is not mounted in the container that runs the link-dependencies action, so we copied the file to
    # ${GITHUB_WORKSPACE} which is mounted in the container.
    - name: Copy dictionary to temp folder mounted by the link-dependencies action
      shell: bash
      run: |
        if ! [ -f "${GITHUB_WORKSPACE}/${{ inputs.link-dependencies-dictionary }}" ]; then
          cp ${{ github.action_path }}/rt-dictionary.yml "${GITHUB_WORKSPACE}/${{ inputs.link-dependencies-dictionary }}"
        fi
    - name: Link dependencies
      if: ${{ steps.check-release.outputs.skip != 'true' }}
      uses: newrelic/release-toolkit/link-dependencies@v1
      with:
        # see comment from last step regarding this file.
        dictionary: ${{ inputs.link-dependencies-dictionary }}
        yaml: ${{ inputs.git-root }}/changelog.yaml
    - name: Calculate next version
      if: ${{ steps.check-release.outputs.skip != 'true' }}
      id: version
      uses: newrelic/release-toolkit/next-version@v1
      with:
        git-root: ${{ inputs.git-root }}
        yaml: ${{ inputs.git-root }}/changelog.yaml
    - name: Update the markdown
      if: ${{ steps.check-release.outputs.skip != 'true' }}
      uses: newrelic/release-toolkit/update-markdown@v1
      with:
        markdown: ${{ inputs.git-root }}/CHANGELOG.md
        yaml: ${{ inputs.git-root }}/changelog.yaml
        version: ${{ steps.version.outputs.next-version }}
    - name: Render the changelog snippet
      if: ${{ steps.check-release.outputs.skip != 'true' }}
      uses: newrelic/release-toolkit/render@v1
      with:
        markdown: ${{ inputs.git-root }}/CHANGELOG.partial.md
        yaml: ${{ inputs.git-root }}/changelog.yaml
        version: ${{ steps.version.outputs.next-version }}
    - name: Create outputs
      if: ${{ steps.check-release.outputs.skip != 'true' }}
      shell: bash
      id: release
      run: |
        echo "title=$(grep -E "^## " ${{ inputs.git-root }}/CHANGELOG.partial.md | sed 's|^## ||')" >> $GITHUB_OUTPUT

        echo "changelog-partial<<EOF"                    >> $GITHUB_OUTPUT
        cat ${{ inputs.git-root }}/CHANGELOG.partial.md  >> $GITHUB_OUTPUT
        echo "EOF"                                       >> $GITHUB_OUTPUT

        echo "changelog<<EOF"                    >> $GITHUB_OUTPUT
        cat ${{ inputs.git-root }}/CHANGELOG.md  >> $GITHUB_OUTPUT
        echo "EOF"                               >> $GITHUB_OUTPUT
    - name: Clean the workspace
      if: ${{ steps.check-release.outputs.skip != 'true' }}
      shell: bash
      run: |
        rm ${{ inputs.git-root }}/CHANGELOG.md.bak
        rm ${{ inputs.git-root }}/changelog.yaml
